The system is: Windows - 10.0.22000 - AMD64
Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.35.32215/bin/Hostx64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.35.32215 版
版权所有(C) Microsoft Corporation。保留所有权利。

CMakeCCompilerId.c
Microsoft (R) Incremental Linker Version 14.35.32215.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCCompilerId.exe 
CMakeCCompilerId.obj 


Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.exe"

Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.obj"

The C compiler identification is MSVC, found in "D:/Desktop/program/C++/TheSurvivor/out/build/x64-Debug/CMakeFiles/3.25.1-msvc1/CompilerIdC/CMakeCCompilerId.exe"

Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.35.32215/bin/Hostx64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.35.32215 版
版权所有(C) Microsoft Corporation。保留所有权利。

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.35.32215.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "D:/Desktop/program/C++/TheSurvivor/out/build/x64-Debug/CMakeFiles/3.25.1-msvc1/CompilerIdCXX/CMakeCXXCompilerId.exe"

Detecting C compiler ABI info compiled with the following output:
Change Dir: D:/Desktop/program/C++/TheSurvivor/out/build/x64-Debug/CMakeFiles/CMakeScratch/TryCompile-qt5cfu

Run Build Command(s):C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_7ebb2 && [1/2] Building C object CMakeFiles\cmTC_7ebb2.dir\CMakeCCompilerABI.c.obj
[2/2] Linking C executable cmTC_7ebb2.exe



Detecting CXX compiler ABI info compiled with the following output:
Change Dir: D:/Desktop/program/C++/TheSurvivor/out/build/x64-Debug/CMakeFiles/CMakeScratch/TryCompile-6il9ib

Run Build Command(s):C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_86b60 && [1/2] Building CXX object CMakeFiles\cmTC_86b60.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_86b60.exe



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: D:/Desktop/program/C++/TheSurvivor/out/build/x64-Debug/CMakeFiles/CMakeScratch/TryCompile-htqvrb

Run Build Command(s):C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_4c05b && [1/2] Building CXX object CMakeFiles\cmTC_4c05b.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_4c05b.exe


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}

